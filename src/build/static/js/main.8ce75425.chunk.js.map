{"version":3,"sources":["pages/HomePage.js","pages/TimingAttack.js","pages/NotFoundPage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","react_default","a","createElement","Fragment","TimingAttack","accountId","password","login","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","event","result","body","wrap","_context","prev","next","preventDefault","fetch","method","headers","Headers","content-type","JSON","stringify","sent","json","console","log","stop","_x","apply","this","arguments","htmlFor","id","type","onChange","_event$target","target","_target$value","value","_event$target2","_target$value2","onClick","NotFoundPage","NavBar","react_router_dom","to","App","className","src_NavBar","react_router","path","component","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ce75425.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => (\n    <>\n    <h1>Hello There!</h1>\n    </>\n);\n\nexport default HomePage;","import React from 'react';\n\nconst TimingAttack = () => {\n    let accountId = '';\n    let password = '';\n\n    const login = async (event) => {\n        event.preventDefault();\n        const result = await fetch('/api/login', {\n            method: 'post',\n            headers: new Headers({'content-type': 'application/json'}),\n            body: JSON.stringify({accountId, password})\n    });\n        const body = await result.json();\n        console.log(JSON.stringify(body, null, 2));\n    };\n\n    const updateAccountId = (event) => {\n        const { target = {} } = event;\n        const { value = '' } = target;\n\n        accountId = value;\n    };\n\n    const updatePassword = (event) => {\n        const { target = {} } = event;\n        const { value = '' } = target;\n\n        password = value;\n    };\n\n    return (\n        <>\n        <h1>timing attack </h1>\n            <form>\n                <label htmlFor=\"accountId\">account</label>\n                <input id=\"accountId\" type=\"text\" onChange={updateAccountId}>\n                </input>\n                <hr />\n                <label htmlFor=\"password\">password</label>\n                <input id=\"password\" type=\"password\" onChange={updatePassword}>\n                </input>\n                <hr />\n                <button onClick={login}>LogIn</button>\n            </form>\n        </>\n    );\n};\n\nexport default TimingAttack;","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nlet timingAttack = `/timing-attack}`;\nlet webCachePoisoning = `/web-cache-poisining}`;\n\nconst NavBar = () => (\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n                <Link to={timingAttack}>Timing Attack</Link>\n            </li>\n            <li>\n                <Link to={webCachePoisoning}>Web cache poisoning</Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default NavBar;","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch,} from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport TimingAttack from './pages/TimingAttack';\nimport NotFoundPage from './pages/NotFoundPage';\nimport NavBar from './NavBar';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/timing-attack\" component={TimingAttack} />\n              <Route component={NotFoundPage} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}